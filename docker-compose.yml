version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: toneslyder
      POSTGRES_USER: toneslyder
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U toneslyder"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://toneslyder:dev_password@postgres:5432/toneslyder
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
    command: npm run --prefix backend dev

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: base
    environment:
      VITE_API_URL: http://localhost:8080
    ports:
      - "3000:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - ./shared:/shared
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0

volumes:
  postgres_data:
  redis_data:
